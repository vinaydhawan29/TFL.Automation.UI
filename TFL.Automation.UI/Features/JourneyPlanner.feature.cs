// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TFL.Automation.UI.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class JourneyPlannerVerificationFromLeicesterSquareToCoventGardenFeature : object, Xunit.IClassFixture<JourneyPlannerVerificationFromLeicesterSquareToCoventGardenFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "JourneyPlanner.feature"
#line hidden
        
        public JourneyPlannerVerificationFromLeicesterSquareToCoventGardenFeature(JourneyPlannerVerificationFromLeicesterSquareToCoventGardenFeature.FixtureData fixtureData, TFL_Automation_UI_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "JourneyPlanner Verification from Leicester Square to Covent Garden", "A short summary of the feature: Scenarios for Plan a journey widget - Journey Pla" +
                    "nner ont he TFL wesbsite under test", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line hidden
#line 6
testRunner.Given("the journey planner website is up and running", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify walking journey from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("FeatureTitle", "JourneyPlanner Verification from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("Description", "Verify walking journey from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("Category", "Automation")]
        public void VerifyWalkingJourneyFromLeicesterSquareToCoventGarden()
        {
            string[] tagsOfScenario = new string[] {
                    "Automation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify walking journey from Leicester Square to Covent Garden", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 9
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 10
    testRunner.When("I request a walking route from \"Leicester Square Underground Station\" to \"Covent " +
                        "Garden Underground Station\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
    testRunner.Then("I should receive a valid route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
    testRunner.And("the walking time should be between 1 and 15 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 13
    testRunner.And("the walking distance should be approximately 0.8 kilometers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Verify cycling journey from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("FeatureTitle", "JourneyPlanner Verification from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("Description", "Verify cycling journey from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("Category", "Automation")]
        public void VerifyCyclingJourneyFromLeicesterSquareToCoventGarden()
        {
            string[] tagsOfScenario = new string[] {
                    "Automation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify cycling journey from Leicester Square to Covent Garden", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 16
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 17
    testRunner.When("I request a cycling route from \"Leicester Square Underground Station\" to \"Covent " +
                        "Garden Underground Station\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
    testRunner.Then("I should receive a valid route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 19
    testRunner.And("the cycling time should be between 3 and 10 minutes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
    testRunner.And("the cycling distance should be approximately 0.8 kilometers", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Compare walking and cycling times")]
        [Xunit.TraitAttribute("FeatureTitle", "JourneyPlanner Verification from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("Description", "Compare walking and cycling times")]
        [Xunit.TraitAttribute("Category", "Automation")]
        public void CompareWalkingAndCyclingTimes()
        {
            string[] tagsOfScenario = new string[] {
                    "Automation"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Compare walking and cycling times", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 23
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 24
    testRunner.When("I request both walking and cycling routes from \"Leicester Square Underground Stat" +
                        "ion\" to \"Covent Garden Underground Station\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 25
    testRunner.Then("the cycling time should be less than the walking time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
    testRunner.And("both routes should have the same approximate distance", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Verify journey details for different transportation modes")]
        [Xunit.TraitAttribute("FeatureTitle", "JourneyPlanner Verification from Leicester Square to Covent Garden")]
        [Xunit.TraitAttribute("Description", "Verify journey details for different transportation modes")]
        [Xunit.TraitAttribute("Category", "ManualScenarios")]
        [Xunit.InlineDataAttribute("walking", new string[0])]
        [Xunit.InlineDataAttribute("cycling", new string[0])]
        public void VerifyJourneyDetailsForDifferentTransportationModes(string mode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ManualScenarios"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("mode", mode);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify journey details for different transportation modes", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 30
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
this.FeatureBackground();
#line hidden
#line 31
    testRunner.When(string.Format("I request a {0} route from \"Leicester Square Underground Station\" to \"Covent Gard" +
                            "en Underground Station\"", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 32
    testRunner.Then("I should receive a valid route", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 33
    testRunner.And(string.Format("the estimated time should be within acceptable range for {0}", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 34
    testRunner.And(string.Format("the route should use appropriate {0} paths or roads", mode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                JourneyPlannerVerificationFromLeicesterSquareToCoventGardenFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                JourneyPlannerVerificationFromLeicesterSquareToCoventGardenFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
